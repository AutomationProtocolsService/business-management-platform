The Problem is NOT in the PDFKit Code

Given this information, the problem is not in the generatePDFFromHTML function or how it handles multi-line text. PDFKit is working as expected.

Where is the Problem?

The issue is now very likely to be one of the following:

CSS Styling: The HTML that's being generated (even though you're not directly converting it to PDF) might have CSS styles that are interfering with how the table row is being displayed in your application. Specifically, there might be styles that are:
Setting a fixed height on the table row.
Hiding or clipping the overflow of the description text.
Using incorrect padding or margins.
How the PDF is Displayed: The problem might be in how you are viewing the generated PDF. Some PDF viewers might not render the table correctly, especially if the PDF itself has some unusual characteristics.
Data in renderInvoiceTemplate: Although the data is correct in generatePDFFromHTML, there might be an issue in how that data is being formatted within the renderInvoiceTemplate function.
Next Steps to Solve This

Inspect the HTML Output:

The most crucial step is to see the exact HTML that's being generated by your renderInvoiceTemplate function.  You need to view the raw HTML source code.

If your server is an Express server, you can modify the route that handles the PDF generation to send the HTML as a response instead of generating the PDF.  This will allow you to see the HTML in your browser.

TypeScript

// In your Express route (example)
app.get('/api/invoices/:id/pdf', async (req, res) => {
  const invoiceId = parseInt(req.params.id, 10);
  // ... (fetch invoice data)
  const htmlContent = await PdfService.renderInvoiceTemplate(invoiceData);
  // res.type('text/html'); // Set the content type to HTML
  // res.send(htmlContent);  // Send the HTML instead of generating PDF
  const pdfBuffer = await PdfService.generateInvoicePDF(invoiceData);
  res.type('application/pdf');
  res.send(pdfBuffer);
});
Once you have the HTML, paste it into a code editor or use your browser's developer tools to inspect the table structure and CSS styles.  Look for any styles that might be affecting the height of the <td> element that contains the description.

Pay close attention to:

height properties on <tr> or <td> elements.
overflow properties.
padding and margin properties.
Any CSS classes that might be applied to the table or its cells.
Simplify the HTML Template:

To isolate the problem, temporarily simplify the HTML template in the renderInvoiceTemplate function to the absolute minimum:

TypeScript

private static async renderInvoiceTemplate(invoice: InvoiceWithRelations): Promise<string> {
  let html = `
    <html>
    <head>
      <title>Invoice ${invoice.invoiceNumber}</title>
      <style>
        body { font-family: 'Helvetica'; font-size: 12px; }
        .items-table { width: 100%; border-collapse: collapse; }
        .items-table th, .items-table td { border: 1px solid #ccc; padding: 8px; }
        .text-right { text-align: right; }
      </style>
    </head>
    <body>
      <div>
        <table class="items-table">
          <thead>
            <tr>
              <th>Description</th>
              <th>Quantity</th>
              <th>Unit Price</th>
              <th class="text-right">Total</th>
            </tr>
          </thead>
          <tbody>
  `;

  if (invoice.items && invoice.items.length > 0) {
    const formatCurrency = (value: number) => {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(value);
    };

    invoice.items.forEach((item) => {
      html += `
            <tr>
              <td><span class="math-inline">\{item\.description \|\| 'No description provided'\}</td\>
<td>{item.quantity || '0'}</td>
<td>formatCurrency(Number(item.unitPrice)∣∣0)</td><tdclass="text−right">{formatCurrency(Number(item.total) || 0)}</td>
</tr>
; }); } else { html +=
<tr><td colspan="4">No items found.</td></tr>
`;
}

      html += `
              </tbody>
            </table>
          </div>
        </body>
        </html>
      `;
      return html;
    }
    ```

* This removes most of the styling and extra elements.  If the PDF displays correctly with this simplified HTML, then the problem is in the removed parts of your original template.
Test with Different PDF Viewer:
Try opening the generated PDF in a different PDF viewer (e.g., Adobe Acrobat Reader, Chrome's built-in viewer, Firefox's viewer). This will help you rule out a problem with your current PDF viewer.
In Summary

The most likely cause is CSS in your HTML template.  Please follow these steps:

Get the Raw HTML: Modify your server code to send the HTML output of renderInvoiceTemplate.
Inspect the HTML: Examine the HTML source code for any styling issues.
Simplify the Template: Use the simplified HTML template to isolate the problem.
Test Different Viewers: Try viewing the PDF in different applications.
By carefully inspecting the HTML and simplifying the template, you'll be able to pinpoint the source of the rendering problem.  I'm here to help you analyze the HTML and interpret the results.  Let me know what you find!