Re-apply the same “date-only, all-day” treatment to Installations
Because Surveys are now fixed by supplying an ISO YYYY-MM-DD string and
passing allDay: true, we only need to send Installations through the very same
normalisation path.

1  Database view – cast start_time to date
sql
Copy
Edit
-- prisma/migrations/20240605_cast_calendar_view.sql
CREATE OR REPLACE VIEW v_calendar_events AS
SELECT
  id::text        AS id,
  'survey'        AS type,
  project_id,
  scheduled_date::date AS start_date,     -- <-- already date-only
  NULL           AS end_date,
  status
FROM surveys
UNION ALL
SELECT
  id::text,
  'installation',
  project_id,
  start_time::date       AS start_date,   -- <-- cast to DATE
  NULL                   AS end_date,
  status
FROM installations;
Both event kinds now expose a single start_date column that is always
'2025-07-02', never a timestamp.

2  Update the shared type & route (tiny tweak)
ts
Copy
Edit
// shared-types.ts
export interface CalendarEvent {
  id: string;
  type: 'survey' | 'installation';
  project_id: number;
  start_date: string;      // YYYY-MM-DD
  status: 'Scheduled' | 'In Progress' | 'Completed' | 'Cancelled';
}
ts
Copy
Edit
// server/routes/calendar.ts
router.get('/', async (req, res, next) => {
  try {
    const { start, end } = req.query;
    const events = await prisma.$queryRaw<CalendarEvent[]>`
      SELECT *
      FROM v_calendar_events
      WHERE start_date BETWEEN ${start}::date AND ${end}::date
    `;
    res.json(events);
  } catch (e) {
    next(e);
  }
});
No time math, no Date constructor – the database hands back pure dates.

3  Calendar mapper – identical logic for both types
tsx
Copy
Edit
const fcEvents = (events ?? []).map((ev) => ({
  id:    ev.id,
  title: ev.type === 'survey' ? 'Survey' : 'Installation',
  start: ev.start_date,         // already date-only
  allDay: true,                 // no time shown
  backgroundColor: ev.type === 'survey' ? '#147aff' : '#ffc400',
  borderColor:     ev.type === 'survey' ? '#147aff' : '#ffc400',
}));
Because every event is all-day:

No “12:00 AM / 7:37 PM” artefacts

No off-by-one shifts – the grid uses the literal date string

4  Invalidate calendar cache on create / edit (already in place)
ts
Copy
Edit
onSuccess: () => {
  queryClient.invalidateQueries({ queryKey: ['calendar'] });
}
Result
Before	After
Installation on Jul 02 shows “Jul 03 7:37 PM”	🟡 Installation pill appears directly on Jul 02 (no time text)
Survey pills already correct	still correct

Apply the SQL migration, adjust the shared type, and tweak the mapper
(as above) – Installations will now align perfectly with their table dates,
just like Surveys.