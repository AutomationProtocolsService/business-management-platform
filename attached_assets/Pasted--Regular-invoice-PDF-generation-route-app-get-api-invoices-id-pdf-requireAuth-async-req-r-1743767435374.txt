// Regular invoice PDF generation route
app.get("/api/invoices/:id/pdf", requireAuth, async (req, res) => {
  const invoiceId = Number(req.params.id);

  // Input validation: Check if invoiceId is a valid number
  if (isNaN(invoiceId)) {
    console.error(`[ERROR] Invalid invoice ID: ${req.params.id}`);
    return res.status(400).json({ message: "Invalid invoice ID.  Must be a number." });
  }

  try {
    // Fetch invoice data
    const invoice = await storage.getInvoice(invoiceId);

    if (!invoice) {
      console.warn(`[WARN] Invoice not found: ${invoiceId}`);
      return res.status(404).json({ message: "Invoice not found" });
    }

    // Check if user has access to this resource
    if (req.isTenantResource && !req.isTenantResource(invoice.createdBy)) {
      console.warn(`[WARN] Access denied for user ${req.user?.id} to invoice ${invoiceId}`);
      return res.status(403).json({ message: "Access denied" });
    }

    // Get invoice items
    const invoiceItems = await storage.getInvoiceItemsByInvoice(invoiceId);
    console.log(`[INFO] Found ${invoiceItems.length} invoice items for PDF generation`);

    // Get customer data
    let customer = null;
    if (invoice.customerId) {
      try {
        customer = await storage.getCustomer(invoice.customerId);
        console.log(`[INFO] Retrieved customer data for invoice: ${customer ? 'found' : 'not found'}`);
      } catch (error) {
        console.error(`[ERROR] Failed to fetch customer data:`, error);
        //  Don't block PDF generation, but log the error.  Customer data is optional.
        customer = null;
      }
    }

    // Get project data
    let project = null;
    if (invoice.projectId) {
      try {
        project = await storage.getProject(invoice.projectId);
        console.log(`[INFO] Retrieved project data for invoice: ${project ? 'found' : 'not found'}`);
      } catch (error) {
        console.error(`[ERROR] Failed to fetch project data:`, error);
        // Don't block PDF generation, but log the error. Project data is optional.
        project = null;
      }
    }

    console.log(`[INFO] Generating PDF for Invoice_${invoice.invoiceNumber}`);

    // Create complete invoice data object with all necessary related data
    const completeInvoiceData = {
      ...invoice,
      items: invoiceItems,
      customer,
      project,
    };

    // Log items count right before passing to PDF service
    console.log(`[INFO] Passing invoice to PDF service with ${completeInvoiceData.items.length} items`);

    // Generate PDF using the PDFService with full context
    const pdfBuffer = await PDFService.generateInvoicePDF(completeInvoiceData);

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=Invoice_${invoice.invoiceNumber}.pdf`);
    res.setHeader('Content-Length', pdfBuffer.length); //  Set Content-Length header

    // Check for empty PDF buffer
    if (!pdfBuffer || pdfBuffer.length === 0) {
      const message = "[ERROR]  Generated PDF buffer is empty";
      console.error(message);
      return res.status(500).json({ message });
    }
    res.send(pdfBuffer);
  } catch (error) {
    // Handle errors during the PDF generation process
    console.error('Error generating invoice PDF:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    res.status(500).json({
      message: "Failed to generate PDF",
      details: errorMessage,
    });
  }
});


// From client/src/pages/invoice-details-page.tsx

// Function that handles PDF generation and download
const handleViewPdf = async () => {
  if (!invoice) return;

  try {
    setIsLoading(true);

    // Make API request to get the PDF
    const response = await fetch(`/api/invoices/${invoice.id}/pdf`, {
      headers: {
        'Accept': 'application/pdf',
        //'Accept-Charset': 'utf-8', //  May not always be necessary, but can be helpful
      },
    });

    if (!response.ok) {
      // Handle HTTP errors more informatively
      let errorMessage = `Failed to fetch PDF: ${response.status} ${response.statusText}`;
      try {
        const errorJson = await response.json();  //  Attempt to get JSON error
        if (errorJson?.message) {
          errorMessage += ` - ${errorJson.message}`;
        }
      } catch (parseError) {
        //  If JSON parsing fails, just use the original message
        console.warn("Failed to parse error JSON", parseError);
      }
      console.error(errorMessage);
      toast({  //  Use toast here.
        title: 'Error',
        description: errorMessage,
        variant: 'destructive',
        duration: 10000, //  Show for a longer time
      });
      throw new Error(errorMessage); //  Throw to stop further processing
    }

    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Invoice_${invoice.invoiceNumber}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

  } catch (error) {
    //  Catch errors from fetch and the error handling above.
    console.error('Error downloading PDF:', error);
    toast({
      title: 'Error',
      description: 'Failed to download invoice PDF. Please try again.',
      variant: 'destructive',
      duration: 10000,
    });
  } finally {
    setIsLoading(false);
  }
};

// UI Component (Button in Actions Dropdown)
// This is part of the Actions component in the invoice details page
<DropdownMenuItem
  onClick={handleViewPdf}
  disabled={isLoading} //  Disable the button when loading
>
  <FileText className="mr-2 h-4 w-4" />
  <span>View PDF</span>
  {isLoading && <Loader2 className="ml-2 h-4 w-4 animate-spin" />}
</DropdownMenuItem>
